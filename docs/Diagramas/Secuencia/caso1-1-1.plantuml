@startuml

!theme reddress-darkblue
autonumber
skinparam style strictuml
skinparam BackGroundColor white
skinparam RoundCorner 7
skinparam SequenceGroupFontColor black
skinparam SequenceGroupBorderColor black
skinparam SequenceGroupBorderThickness 0.5
skinparam ArrowFontColor black
skinparam ArrowColor black
skinparam ActorFontColor black
skinparam participantFontSize 12
skinparam SequenceLifeLineBackGroundColor 2e2e2e
/'
TestCase -> "algothieft:AlgoThieft" as algothieft: visitarEdificio(banco:Edificio)
algothieft -> "novato:Policia" as unPolicia: visitarEdificio(banco)

unPolicia -> "Montreal:Ciudad" as montreal : visitarEdificio(banco, novato:Rango, tiempo:Tiempo)

montreal ->"unEdificio: Edificio" as edificio: serVisitado(proximaCiudad:Ciudad, novato:Rango, tiempo:Tiempo, numeroVisita:Integer)
edificio -> "proximaCiudad:Ciudad" as proximaCiudad : pistaBanco(novato:Rango)
proximaCiudad -> "novato:Rango" as rango : pedirPista(pistasBanco:Pistas, ladron:Ladron)

rango --> proximaCiudad: pistasDevueltas
proximaCiudad -->edificio : pistasDevueltas


edificio -> "tiempo:Tiempo" as tiempo: sumarHoras(1)

montreal <-- edificio: pistasDevueltas
montreal -> montreal : sumarVisita()
unPolicia <-- montreal: pistasDevueltas
unPolicia --> algothieft: pistasDevueltas

TestCase <-- algothieft: pistasDevueltas
'/
TestCase -> "novato:Policia" as unPolicia: visitar(banco:Edificio, maria:Ladron)
'create ":List" as list
'unPolicia -> list : new
unPolicia -> "novato:Rango" as rango: visitar(banco:Edificio)
rango -> "banco:Banco" as banco: serVisitado(novato, tiempo)
banco --> rango: pistaFacil:Pista
rango -->unPolicia : pistaFacil:Pista
unPolicia -> "tiempo:Tiempo" as tiempo: sumarVisita()
tiempo ->tiempo :sumarHoras(cantidadVisitas:Integer)
unPolicia --> TestCase: pistaFacil:Pista
@enduml